name: Docker Images

on:
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:
    inputs:
      promote_tag:
        description: 'Tag to promote to latest (leave empty for new build)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  determine-action:
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.determine.outputs.action }}
      source_tag: ${{ steps.determine.outputs.source_tag }}
      target_tags: ${{ steps.determine.outputs.target_tags }}
      should_build: ${{ steps.determine.outputs.should_build }}
      should_promote: ${{ steps.determine.outputs.should_promote }}
    steps:
      - name: Determine action
        id: determine
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Promote input: ${{ github.event.inputs.promote_tag }}"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.promote_tag }}" ]; then
            echo "action=promote" >> $GITHUB_OUTPUT
            echo "source_tag=${{ github.event.inputs.promote_tag }}" >> $GITHUB_OUTPUT
            echo "target_tags=latest" >> $GITHUB_OUTPUT
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "should_promote=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v*.*.* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "action=release" >> $GITHUB_OUTPUT
            echo "source_tag=${VERSION}" >> $GITHUB_OUTPUT
            echo "target_tags=latest,${VERSION}" >> $GITHUB_OUTPUT
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "should_promote=false" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "action=build" >> $GITHUB_OUTPUT
            echo "source_tag=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "target_tags=${{ github.sha }},master-latest" >> $GITHUB_OUTPUT
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "should_promote=false" >> $GITHUB_OUTPUT
          else
            echo "action=skip" >> $GITHUB_OUTPUT
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "should_promote=false" >> $GITHUB_OUTPUT
          fi

  lint:
    runs-on: ubuntu-latest
    needs: determine-action
    if: needs.determine-action.outputs.should_build == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Lint
        run: yarn lint

  build-images:
    runs-on: ubuntu-latest
    needs: [determine-action, lint]
    if: needs.determine-action.outputs.should_build == 'true'
    permissions:
      contents: read
      packages: write
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Backend Services
          - appname: api
            image: ghcr.io/${{ github.repository }}/api
            dockerfile: services/api/Dockerfile
          - appname: authenticator
            image: ghcr.io/${{ github.repository }}/authenticator
            dockerfile: services/authenticator/Dockerfile
          - appname: cache
            image: ghcr.io/${{ github.repository }}/cache
            dockerfile: services/cache/Dockerfile
          - appname: emailer
            image: ghcr.io/${{ github.repository }}/emailer
            dockerfile: services/emailer/Dockerfile
          - appname: gateway
            image: ghcr.io/${{ github.repository }}/gateway
            dockerfile: services/gateway/Dockerfile
          - appname: monitoring
            image: ghcr.io/${{ github.repository }}/monitoring
            dockerfile: services/monitoring/Dockerfile
          - appname: pdfgenerator
            image: ghcr.io/${{ github.repository }}/pdfgenerator
            dockerfile: services/pdfgenerator/Dockerfile

          - appname: tenantapi
            image: ghcr.io/${{ github.repository }}/tenantapi
            dockerfile: services/tenantapi/Dockerfile
          - appname: whatsapp
            image: ghcr.io/${{ github.repository }}/whatsapp
            dockerfile: services/whatsapp/Dockerfile
          # Frontend Applications
          - appname: landlord-frontend
            image: ghcr.io/${{ github.repository }}/landlord-frontend
            dockerfile: webapps/landlord/Dockerfile
          - appname: tenant-frontend
            image: ghcr.io/${{ github.repository }}/tenant-frontend
            dockerfile: webapps/tenant/Dockerfile

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and validate tags
        id: tags
        run: |
          # Get target tags from determine-action job
          TARGET_TAGS="${{ needs.determine-action.outputs.target_tags }}"
          echo "Target tags from determine-action: $TARGET_TAGS"
          
          # Build final tags
          FINAL_TAGS=""
          IFS=',' read -ra TAG_ARRAY <<< "$TARGET_TAGS"
          for tag in "${TAG_ARRAY[@]}"; do
            # Trim whitespace
            tag=$(echo "$tag" | xargs)
            if [ -n "$tag" ]; then
              if [ -n "$FINAL_TAGS" ]; then
                FINAL_TAGS="$FINAL_TAGS,"
              fi
              FINAL_TAGS="${FINAL_TAGS}${{ matrix.image }}:${tag}"
            fi
          done
          
          echo "Final tags for ${{ matrix.appname }}: $FINAL_TAGS"
          
          # Validate tags format
          IFS=',' read -ra FINAL_TAG_ARRAY <<< "$FINAL_TAGS"
          for tag in "${FINAL_TAG_ARRAY[@]}"; do
            if [[ ! "$tag" =~ ^ghcr\.io/.+:.+ ]]; then
              echo "❌ Invalid tag format: $tag"
              exit 1
            fi
          done
          
          echo "✅ All tags validated successfully"
          echo "tags=$FINAL_TAGS" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  promote-images:
    runs-on: ubuntu-latest
    needs: determine-action
    if: needs.determine-action.outputs.should_promote == 'true'
    permissions:
      contents: read
      packages: write
    
    strategy:
      fail-fast: false
      matrix:
        service: [api, authenticator, cache, emailer, gateway, monitoring, pdfgenerator, tenantapi, whatsapp, landlord-frontend, tenant-frontend]

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Promote to latest
        run: |
          SOURCE_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ needs.determine-action.outputs.source_tag }}"
          TARGET_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:latest"
          
          echo "🔄 Promoting ${{ matrix.service }}..."
          echo "   From: $SOURCE_IMAGE"
          echo "   To: $TARGET_IMAGE"
          
          # Use docker buildx imagetools for promotion (more reliable than pull/tag/push)
          if docker buildx imagetools inspect "$SOURCE_IMAGE" > /dev/null 2>&1; then
            docker buildx imagetools create --tag "$TARGET_IMAGE" "$SOURCE_IMAGE"
            echo "✅ Successfully promoted ${{ matrix.service }}"
          else
            echo "❌ Source image $SOURCE_IMAGE not found"
            exit 1
          fi

  summary:
    runs-on: ubuntu-latest
    needs: [determine-action, build-images, promote-images]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## 🐳 Docker Images Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action**: ${{ needs.determine-action.outputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Build**: ${{ needs.determine-action.outputs.should_build }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Promote**: ${{ needs.determine-action.outputs.should_promote }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-images.result }}" = "success" ]; then
            echo "✅ **Build Images**: SUCCESS" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-images.result }}" = "failure" ]; then
            echo "❌ **Build Images**: FAILED" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-images.result }}" = "skipped" ]; then
            echo "⏭️ **Build Images**: SKIPPED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.promote-images.result }}" = "success" ]; then
            echo "✅ **Promote Images**: SUCCESS" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.promote-images.result }}" = "failure" ]; then
            echo "❌ **Promote Images**: FAILED" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.promote-images.result }}" = "skipped" ]; then
            echo "⏭️ **Promote Images**: SKIPPED" >> $GITHUB_STEP_SUMMARY
          fi
