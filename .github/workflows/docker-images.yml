name: Docker Images

on:
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:
    inputs:
      promote_tag:
        description: 'Tag to promote to latest (leave empty for new build)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  determine-action:
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.determine.outputs.action }}
      source_tag: ${{ steps.determine.outputs.source_tag }}
      target_tags: ${{ steps.determine.outputs.target_tags }}
    steps:
      - name: Determine action
        id: determine
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.promote_tag }}" ]; then
            echo "action=promote" >> $GITHUB_OUTPUT
            echo "source_tag=${{ github.event.inputs.promote_tag }}" >> $GITHUB_OUTPUT
            echo "target_tags=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v*.*.* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "action=release" >> $GITHUB_OUTPUT
            echo "source_tag=${VERSION}" >> $GITHUB_OUTPUT
            echo "target_tags=latest,${VERSION}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "action=build" >> $GITHUB_OUTPUT
            echo "source_tag=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "target_tags=${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "action=skip" >> $GITHUB_OUTPUT
          fi

  lint:
    runs-on: ubuntu-latest
    needs: determine-action
    if: needs.determine-action.outputs.action == 'build'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: yarn
      - name: Lint
        run: yarn lint

  build-images:
    runs-on: ubuntu-latest
    needs: [determine-action, lint]
    if: needs.determine-action.outputs.action == 'build' || needs.determine-action.outputs.action == 'release'
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        include:
          - appname: api
            image: ghcr.io/${{ github.repository }}/api
            dockerfile: services/api/Dockerfile
          - appname: authenticator
            image: ghcr.io/${{ github.repository }}/authenticator
            dockerfile: services/authenticator/Dockerfile
          - appname: cache
            image: ghcr.io/${{ github.repository }}/cache
            dockerfile: services/cache/Dockerfile
          - appname: emailer
            image: ghcr.io/${{ github.repository }}/emailer
            dockerfile: services/emailer/Dockerfile
          - appname: gateway
            image: ghcr.io/${{ github.repository }}/gateway
            dockerfile: services/gateway/Dockerfile
          - appname: monitoring
            image: ghcr.io/${{ github.repository }}/monitoring
            dockerfile: services/monitoring/Dockerfile
          - appname: pdfgenerator
            image: ghcr.io/${{ github.repository }}/pdfgenerator
            dockerfile: services/pdfgenerator/Dockerfile
          - appname: resetservice
            image: ghcr.io/${{ github.repository }}/resetservice
            dockerfile: services/resetservice/Dockerfile
          - appname: tenantapi
            image: ghcr.io/${{ github.repository }}/tenantapi
            dockerfile: services/tenantapi/Dockerfile
          - appname: whatsapp
            image: ghcr.io/${{ github.repository }}/whatsapp
            dockerfile: services/whatsapp/Dockerfile
          - appname: landlord-frontend
            image: ghcr.io/${{ github.repository }}/landlord-frontend
            dockerfile: webapps/landlord/Dockerfile
          - appname: tenant-frontend
            image: ghcr.io/${{ github.repository }}/tenant-frontend
            dockerfile: webapps/tenant/Dockerfile

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}

      - name: Build tags
        id: tags
        run: |
          TAGS=""
          IFS=',' read -ra TAG_ARRAY <<< "${{ needs.determine-action.outputs.target_tags }}"
          for tag in "${TAG_ARRAY[@]}"; do
            if [ -n "$TAGS" ]; then
              TAGS="$TAGS,"
            fi
            TAGS="$TAGS${{ matrix.image }}:$tag"
          done
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  promote-images:
    runs-on: ubuntu-latest
    needs: determine-action
    if: needs.determine-action.outputs.action == 'promote'
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [api, authenticator, cache, emailer, gateway, monitoring, pdfgenerator, resetservice, tenantapi, whatsapp, landlord-frontend, tenant-frontend]

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Promote to latest
        run: |
          SOURCE_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ needs.determine-action.outputs.source_tag }}"
          TARGET_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:latest"
          
          echo "üîÑ Promoting ${{ matrix.service }}..."
          echo "   From: $SOURCE_IMAGE"
          echo "   To: $TARGET_IMAGE"
          
          if docker pull "$SOURCE_IMAGE"; then
            docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE"
            docker push "$TARGET_IMAGE"
            echo "‚úÖ Successfully promoted ${{ matrix.service }}"
          else
            echo "‚ùå Failed to pull $SOURCE_IMAGE"
            exit 1
          fi
