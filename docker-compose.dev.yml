services:
  ###############################################################################
  # Valkey
  ###############################################################################
  valkey:
    image: valkey/valkey:7.2-bookworm
    environment:
      VALKEY_PORT: ${VALKEY_PORT:-6379}
    expose:
      - '6379'
    volumes:
      - ./data/valkey:/data
    command: [
        'sh',
        '-c',
        'docker-entrypoint.sh --requirepass ${VALKEY_PASSWORD} --loglevel warning'
      ]
    networks:
      - net
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${VALKEY_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  ###############################################################################
  # Mongo
  ###############################################################################
  mongo:
    image: mongo:7
    environment:
      MONGO_PORT: ${MONGO_PORT:-27017}
    command: mongod --quiet --logpath /dev/null --wiredTigerCacheSizeGB 1
    expose:
      - '27017'
    volumes:
      - ./data/mongodb:/data/db
      - ./backup:/backup
    networks:
      - net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  ###############################################################################
  # Cache Service
  ###############################################################################
  cache:
    restart: unless-stopped
    build:
      context: .
      dockerfile: services/cache/Dockerfile
    volumes:
      - ./services/cache:/usr/app/services/cache
      - ./services/common:/usr/app/services/common
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8600
      LOGGER_LEVEL: ${LOGGER_LEVEL:-debug}
      VALKEY_URL: redis://valkey:6379
      VALKEY_PASSWORD: ${VALKEY_PASSWORD}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
    expose:
      - '8600'
    networks:
      - net
    depends_on:
      valkey:
        condition: service_healthy

  ###############################################################################
  # Monitoring Service
  ###############################################################################
  monitoring:
    restart: unless-stopped
    build:
      context: .
      dockerfile: services/monitoring/Dockerfile
    volumes:
      - ./services/monitoring:/usr/app/services/monitoring
      - ./services/common:/usr/app/services/common
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8800
      LOGGER_LEVEL: ${LOGGER_LEVEL:-debug}
      MONGO_URL: ${MONGO_URL:-mongodb://mongo:27017/mredb}
      VALKEY_URL: redis://valkey:6379
      VALKEY_PASSWORD: ${VALKEY_PASSWORD}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
    expose:
      - '8800'
    networks:
      - net
    depends_on:
      mongo:
        condition: service_healthy
      valkey:
        condition: service_healthy

  ###############################################################################
  # Gateway
  ###############################################################################
  gateway:
    restart: unless-stopped
    build:
      context: .
      dockerfile: services/gateway/Dockerfile
    volumes:
      - ./services/gateway:/usr/app/services/gateway
      - ./services/common:/usr/app/services/common
      - ./types:/usr/app/types
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      LOGGER_LEVEL: ${LOGGER_LEVEL:-debug}
      PORT: ${GATEWAY_PORT:-8080}
      MONGO_URL: ${MONGO_URL:-mongodb://mongo:27017/mredb}
      VALKEY_URL: redis://valkey:6379
      VALKEY_PASSWORD: ${VALKEY_PASSWORD}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      EXPOSE_FRONTENDS: 'true'
      AUTHENTICATOR_URL: ${AUTHENTICATOR_URL:-http://authenticator:8000}
      API_URL: http://api:8200/api/v2
      PDFGENERATOR_URL: http://pdfgenerator:8300/pdfgenerator
      EMAILER_URL: http://emailer:8400/emailer
      WHATSAPP_URL: http://whatsapp:8500
      CACHE_URL: http://cache:8600
      MONITORING_URL: http://monitoring:8800
      LANDLORD_FRONTEND_URL: http://landlord-frontend:8180
      LANDLORD_BASE_PATH: /landlord
      TENANT_FRONTEND_URL: http://tenant-frontend:8190
      TENANT_BASE_PATH: /tenant
      APP_DOMAIN: localhost:8080
      CORS_ENABLED: '${CORS_ENABLED:-true}'
      TENANTAPI_URL: http://tenantapi:8250/tenantapi
    expose:
      - '8080'
    ports:
      - '8080:8080'
    networks:
      - net
    depends_on:
      authenticator:
        condition: service_started
      api:
        condition: service_started
      tenantapi:
        condition: service_started
      pdfgenerator:
        condition: service_started
      emailer:
        condition: service_started
      whatsapp:
        condition: service_started
      cache:
        condition: service_started
      monitoring:
        condition: service_started

  ###############################################################################
  # Authenticator
  ###############################################################################
  authenticator:
    restart: unless-stopped
    build:
      context: .
      dockerfile: services/authenticator/Dockerfile
    volumes:
      - ./services/authenticator:/usr/app/services/authenticator
      - ./services/common:/usr/app/services/common
      - ./types:/usr/app/types
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${AUTHENTICATOR_PORT:-8000}
      LOGGER_LEVEL: ${LOGGER_LEVEL:-debug}
      VALKEY_URL: redis://valkey:6379
      VALKEY_PASSWORD: ${VALKEY_PASSWORD}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      RESET_TOKEN_SECRET: ${RESET_TOKEN_SECRET}
      APPCREDZ_TOKEN_SECRET: ${APPCREDZ_TOKEN_SECRET}
      MONGO_URL: ${MONGO_URL:-mongodb://mongo:27017/mredb}
      EMAILER_URL: http://emailer:8400/emailer
      SIGNUP: 'true'
      APP_DOMAIN: ${APP_DOMAIN:-localhost}
      APP_PROTOCOL: ${APP_PROTOCOL:-http}
      WHATSAPP_API_URL: ${WHATSAPP_API_URL:-https://graph.facebook.com/v23.0}
      WHATSAPP_ACCESS_TOKEN: ${WHATSAPP_ACCESS_TOKEN}
      WHATSAPP_PHONE_NUMBER_ID: ${WHATSAPP_PHONE_NUMBER_ID}
      WHATSAPP_BUSINESS_ACCOUNT_ID: ${WHATSAPP_BUSINESS_ACCOUNT_ID}
      WHATSAPP_LOGIN_TEMPLATE_NAME: ${WHATSAPP_LOGIN_TEMPLATE_NAME}
      WHATSAPP_LOGIN_TEMPLATE_LANGUAGE: ${WHATSAPP_LOGIN_TEMPLATE_LANGUAGE}
    expose:
      - '8000'
    networks:
      - net
    depends_on:
      valkey:
        condition: service_healthy
      mongo:
        condition: service_healthy
      emailer:
        condition: service_started

  ###############################################################################
  # PDFGenerator
  ###############################################################################
  pdfgenerator:
    restart: unless-stopped
    build:
      context: .
      dockerfile: services/pdfgenerator/Dockerfile
    volumes:
      - ./services/pdfgenerator:/usr/app/services/pdfgenerator
      - ./services/common:/usr/app/services/common
      - ./types:/usr/app/types
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8300
      LOGGER_LEVEL: ${LOGGER_LEVEL:-debug}
      MONGO_URL: ${MONGO_URL:-mongodb://mongo:27017/mredb}
      VALKEY_URL: redis://valkey:6379
      VALKEY_PASSWORD: ${VALKEY_PASSWORD}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      CIPHER_KEY: ${CIPHER_KEY}
      CIPHER_IV_KEY: ${CIPHER_IV_KEY}
      UPLOAD_MAX_SIZE: ${UPLOAD_MAX_SIZE:-2000000000}
    expose:
      - '8300'
    networks:
      - net
    depends_on:
      mongo:
        condition: service_healthy
      valkey:
        condition: service_healthy

  ###############################################################################
  # Emailer
  ###############################################################################
  emailer:
    restart: unless-stopped
    build:
      context: .
      dockerfile: services/emailer/Dockerfile
    volumes:
      - ./services/emailer:/usr/app/services/emailer
      - ./services/common:/usr/app/services/common
      - ./types:/usr/app/types
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8400
      LOGGER_LEVEL: ${LOGGER_LEVEL:-debug}
      MONGO_URL: ${MONGO_URL:-mongodb://mongo:27017/mredb}
      VALKEY_URL: redis://valkey:6379
      VALKEY_PASSWORD: ${VALKEY_PASSWORD}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      CIPHER_KEY: ${CIPHER_KEY}
      CIPHER_IV_KEY: ${CIPHER_IV_KEY}
      ALLOW_SENDING_EMAILS: ${ALLOW_SENDING_EMAILS:-true}
      LANDLORD_APP_URL: ${GATEWAY_URL}/landlord
      TENANT_APP_URL: ${GATEWAY_URL}/tenant
      EMAIL_FROM: ${EMAIL_FROM}
      EMAIL_REPLY_TO: ${EMAIL_REPLY_TO}
      EMAIL_BCC: ${EMAIL_BCC}
      SMTP_SERVER: ${SMTP_SERVER}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SECURE: ${SMTP_SECURE}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      GMAIL_EMAIL: ${GMAIL_EMAIL}
      GMAIL_APP_PASSWORD: ${GMAIL_APP_PASSWORD}
      MAILGUN_API_KEY: ${MAILGUN_API_KEY}
      MAILGUN_DOMAIN: ${MAILGUN_DOMAIN}
      PDFGENERATOR_URL: http://pdfgenerator:8300/pdfgenerator
    expose:
      - '8400'
    networks:
      - net
    depends_on:
      mongo:
        condition: service_healthy
      valkey:
        condition: service_healthy
      pdfgenerator:
        condition: service_started

  ###############################################################################
  # API
  ###############################################################################
  api:
    restart: unless-stopped
    build:
      context: .
      dockerfile: services/api/Dockerfile
    volumes:
      - ./services/api:/usr/app/services/api
      - ./services/common:/usr/app/services/common
      - ./types:/usr/app/types
      - ./backup:/usr/app/backup
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8200
      LOGGER_LEVEL: ${LOGGER_LEVEL:-debug}
      MONGO_URL: ${MONGO_URL:-mongodb://mongo:27017/mredb}
      VALKEY_URL: redis://valkey:6379
      VALKEY_PASSWORD: ${VALKEY_PASSWORD}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      CIPHER_KEY: ${CIPHER_KEY}
      CIPHER_IV_KEY: ${CIPHER_IV_KEY}
      EMAILER_URL: http://emailer:8400/emailer
      PDFGENERATOR_URL: http://pdfgenerator:8300/pdfgenerator
      RESTORE_DB: 'false'
    expose:
      - '8200'
    networks:
      - net
    depends_on:
      mongo:
        condition: service_healthy
      valkey:
        condition: service_healthy
      emailer:
        condition: service_started
      pdfgenerator:
        condition: service_started

  ###############################################################################
  # Tenant API
  ###############################################################################
  tenantapi:
    restart: unless-stopped
    build:
      context: .
      dockerfile: services/tenantapi/Dockerfile
    volumes:
      - ./services/tenantapi:/usr/app/services/tenantapi
      - ./services/common:/usr/app/services/common
      - ./types:/usr/app/types
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8250
      LOGGER_LEVEL: ${LOGGER_LEVEL:-debug}
      MONGO_URL: ${MONGO_URL:-mongodb://mongo:27017/mredb}
      VALKEY_URL: redis://valkey:6379
      VALKEY_PASSWORD: ${VALKEY_PASSWORD}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
    expose:
      - '8250'
    networks:
      - net
    depends_on:
      mongo:
        condition: service_healthy
      valkey:
        condition: service_healthy

  ###############################################################################
  # WhatsApp Service
  ###############################################################################
  whatsapp:
    restart: unless-stopped
    build:
      context: .
      dockerfile: services/whatsapp/Dockerfile
    volumes:
      - ./services/whatsapp:/usr/app/services/whatsapp
      - ./services/common:/usr/app/services/common
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${WHATSAPP_PORT:-8500}
      LOGGER_LEVEL: ${LOGGER_LEVEL:-debug}
      MONGO_URL: ${MONGO_URL:-mongodb://mongo:27017/mredb}
      VALKEY_URL: redis://valkey:6379
      VALKEY_PASSWORD: ${VALKEY_PASSWORD}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      AUTHENTICATOR_URL: ${AUTHENTICATOR_URL:-http://authenticator:8000}
      CIPHER_KEY: ${CIPHER_KEY}
      CIPHER_IV_KEY: ${CIPHER_IV_KEY}
      WHATSAPP_API_URL: ${WHATSAPP_API_URL:-https://graph.facebook.com/v18.0}
      WHATSAPP_ACCESS_TOKEN: ${WHATSAPP_ACCESS_TOKEN}
      WHATSAPP_PHONE_NUMBER_ID: ${WHATSAPP_PHONE_NUMBER_ID}
      WHATSAPP_BUSINESS_ACCOUNT_ID: ${WHATSAPP_BUSINESS_ACCOUNT_ID}
      WHATSAPP_WEBHOOK_VERIFY_TOKEN: ${WHATSAPP_WEBHOOK_VERIFY_TOKEN}
      WHATSAPP_TEMPLATE_NAME: ${WHATSAPP_TEMPLATE_NAME}
      WHATSAPP_TEMPLATE_LANGUAGE: ${WHATSAPP_TEMPLATE_LANGUAGE}
      WHATSAPP_INVOICE_TEMPLATE: ${WHATSAPP_INVOICE_TEMPLATE}
      WHATSAPP_PAYMENT_NOTICE_TEMPLATE: ${WHATSAPP_PAYMENT_NOTICE_TEMPLATE}
      WHATSAPP_PAYMENT_REMINDER_TEMPLATE: ${WHATSAPP_PAYMENT_REMINDER_TEMPLATE}
      WHATSAPP_FINAL_NOTICE_TEMPLATE: ${WHATSAPP_FINAL_NOTICE_TEMPLATE}
      WHATSAPP_LOGIN_TEMPLATE_NAME: ${WHATSAPP_LOGIN_TEMPLATE_NAME}
      WHATSAPP_LOGIN_TEMPLATE_LANGUAGE: ${WHATSAPP_LOGIN_TEMPLATE_LANGUAGE}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
    expose:
      - '8500'
    ports:
      - "8500:8500"
    networks:
      - net
    depends_on:
      mongo:
        condition: service_healthy
      valkey:
        condition: service_healthy

  ###############################################################################
  # Landlord frontend
  ###############################################################################
  landlord-frontend:
    restart: unless-stopped
    build:
      context: .
      dockerfile: webapps/landlord/Dockerfile
    volumes:
      # Source code and assets
      - ./webapps/landlord/src:/usr/app/src
      - ./webapps/landlord/public:/usr/app/public
      - ./webapps/landlord/locales:/usr/app/locales
      
      # Configuration files
      - ./webapps/landlord/next.config.js:/usr/app/next.config.js
      - ./webapps/landlord/tailwind.config.js:/usr/app/tailwind.config.js
      - ./webapps/landlord/tsconfig.json:/usr/app/tsconfig.json
      - ./webapps/landlord/components.json:/usr/app/components.json
      - ./webapps/landlord/package.json:/usr/app/package.json
      - ./webapps/landlord/postcss.config.js:/usr/app/postcss.config.js
      - ./webapps/landlord/i18n.js:/usr/app/i18n.js
      - ./webapps/landlord/.eslintrc.json:/usr/app/.eslintrc.json
      
      # Development files
      - ./webapps/landlord/next-env.d.ts:/usr/app/next-env.d.ts
      - ./webapps/landlord/.prettierignore:/usr/app/.prettierignore
      
      # Common UI library
      - ./webapps/commonui:/usr/app/node_modules/@microrealestate/commonui
      
      # Build cache (for faster rebuilds during development)
      - landlord-next-cache:/usr/app/.next
      - landlord-node-modules:/usr/app/node_modules
    environment:
      BASE_PATH: /landlord
      LANDLORD_BASE_PATH: /landlord
      LANDLORD_FRONTEND_PORT: ${LANDLORD_FRONTEND_PORT:-8180}
      PORT: ${LANDLORD_FRONTEND_PORT:-8180}
      DOCKER_GATEWAY_URL: http://gateway:8080
      MONGO_URL: ${MONGO_URL:-mongodb://mongo:27017/mredb}
      CORS_ENABLED: '${CORS_ENABLED:-true}'
      GATEWAY_URL: ${GATEWAY_URL:-http://localhost:8080}
      NODE_ENV: ${NODE_ENV:-development}
      SIGNUP: 'true'
      FEEDBACK_EMAIL: ${FEEDBACK_EMAIL:-feedback@localhost}
    expose:
      - '8180'
    networks:
      - net
    depends_on:
      gateway:
        condition: service_started

  ###############################################################################
  # Tenant frontend
  ###############################################################################
  tenant-frontend:
    restart: unless-stopped
    build:
      context: .
      dockerfile: webapps/tenant/Dockerfile
    volumes:
      # Source code and assets
      - ./webapps/tenant/src:/usr/app/src
      - ./webapps/tenant/public:/usr/app/public
      - ./webapps/tenant/locales:/usr/app/locales
      
      # Configuration files
      - ./webapps/tenant/next.config.js:/usr/app/next.config.js
      - ./webapps/tenant/tailwind.config.ts:/usr/app/tailwind.config.ts
      - ./webapps/tenant/tsconfig.json:/usr/app/tsconfig.json
      - ./webapps/tenant/components.json:/usr/app/components.json
      - ./webapps/tenant/package.json:/usr/app/package.json
      - ./webapps/tenant/postcss.config.js:/usr/app/postcss.config.js
      - ./webapps/tenant/.eslintrc.json:/usr/app/.eslintrc.json
      
      # Development and testing files
      - ./webapps/tenant/next-env.d.ts:/usr/app/next-env.d.ts
      - ./webapps/tenant/jest.config.js:/usr/app/jest.config.js
      - ./webapps/tenant/jest.setup.js:/usr/app/jest.setup.js
      - ./webapps/tenant/__mocks__:/usr/app/__mocks__
      
      # Common UI library
      - ./webapps/commonui:/usr/app/node_modules/@microrealestate/commonui
      
      # Build cache (for faster rebuilds during development)
      - tenant-next-cache:/usr/app/.next
      - tenant-node-modules:/usr/app/node_modules
    environment:
      BASE_PATH: /tenant
      TENANT_BASE_PATH: /tenant
      TENANT_FRONTEND_PORT: ${TENANT_FRONTEND_PORT:-8190}
      PORT: ${TENANT_FRONTEND_PORT:-8190}
      DOCKER_GATEWAY_URL: http://gateway:8080
      CORS_ENABLED: '${CORS_ENABLED:-true}'
      GATEWAY_URL: ${GATEWAY_URL:-http://localhost:8080}
      NODE_ENV: ${NODE_ENV:-development}
    expose:
      - '8190'
    networks:
      - net
    depends_on:
      gateway:
        condition: service_started

###############################################################################
# Networks
###############################################################################
networks:
  net:
    driver: bridge

###############################################################################
# Named volumes for frontend debugging and development
###############################################################################
volumes:
  # Landlord frontend build cache
  landlord-next-cache:
    driver: local
  landlord-node-modules:
    driver: local
  
  # Tenant frontend build cache
  tenant-next-cache:
    driver: local
  tenant-node-modules:
    driver: local
